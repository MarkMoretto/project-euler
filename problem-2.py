
"""
Purpose: Project Euler problems
Date created: 2019-10-20

ID: 2
Title: Even Fibonacci numbers
URI: https://projecteuler.net/problem=2
Status: Incomplete

Contributor(s): Mark M.

Desc: 
    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    By starting with 1 and 2, the first 10 terms will be:
    
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    
    By considering the terms in the Fibonacci sequence whose values do not exceed
    four million, find the sum of the even-valued terms.
"""


from os.path import join as osjoin
# import dis
import unittest
import tempfile
import numpy as np



# __name__ = 'TEST'


# def fib(n):
#     if n == 0:
#         return 0
#     elif n == 1:
#         return 1
#     else:
#         return np.sum([fib(n-1), fib(n-2)])



def fib(n):
    a, b = 0, 1
    while b < n:
        yield b
        a, b = b, a + b

n = 4e6
sum_fib = lambda x: np.sum([fib(i) for i in np.arange(x, dtype=np.int64) if fib(i) % 2 == 0 and fib(i) <= x])
run_fib = lambda x: [fib(i) for i in np.arange(x, dtype=np.int64) if fib(i) % 2 == 0 and fib(i) <= x]

f_name = osjoin(tempfile.mkdtemp(), 'bigfib.dat')
bigdata_f = np.memmap(f_name, dtype=np.int64, mode='w+', shape=(int(n),))
bigdata_f[:] = run_fib(int(n))

### Run after processing complete to commit data to disk
bigdata_f.flush()

### Waiting for processing to complete
bd_mtrx = np.memmap(f_name, dtype=np.int64, mode='r', shape=(int(n),))












class SequenceTestCase(unittest.TestCase):
    def test_first_5(self):
        n = 5
        expected = [0, 1, 1, 2, 3]
        seq_results = [i for i in fib(n)]
        self.assertEqual(expected, seq_results)

    def test_first_5_w_param(self):
        n = 5
        starters=[0, 1]
        expected = [0, 1, 1, 2, 3]
        seq_results = [i for i in fib(n, starters)]
        self.assertEqual(expected, seq_results)

    def test_first_10_w_param(self):
        n = 10
        starters=[1, 2]
        expected = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
        seq_results = [i for i in fib(n, starters)]
        self.assertEqual(expected, seq_results)

    def test_first_10_w_param_evens_only(self):
        n = 10
        starters=[1, 2]
        expected = [2, 8, 34]
        seq_results = [i for i in fib(n, starters) if i % 2 == 0]
        self.assertEqual(expected, seq_results)


if __name__ == 'TEST':
    unittest.main()

