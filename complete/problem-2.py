
"""
Purpose: Project Euler problems
Date created: 2019-10-20

ID: 2
Title: Even Fibonacci numbers
URI: https://projecteuler.net/problem=2
Status: Complete

Contributor(s): Mark M.

Desc: 
    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    By starting with 1 and 2, the first 10 terms will be:
    
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    
    By considering the terms in the Fibonacci sequence whose values do not exceed
    four million, find the sum of the even-valued terms.
"""


# Unnecessary lambd function to produce the sum of two integers
addtwo = lambda x, y: x + y


def run_fib(max_val):
    # Output variable with default value of zero
    total_fib = 0

    # Set first two variables (fib_back_2, fib_back_1) to the first two Fibonacci
    # numbers above zero.
    # Set current Fibonacci value (fib_current) to zero
    fib_back_2, fib_back_1, fib_current = 1, 1, 0

    # While the latest Fibonacci number is below our threshold
    while fib_current < max_val:

        # Set current Fibonacci variable to sum of prior two values
        fib_current = addtwo(fib_back_2, fib_back_1)

        # Set two-back variable to one-back variable
        fib_back_2 = fib_back_1

        # Set one-back variable to current variable value
        fib_back_1 = fib_current

        # If the current number is event
        if fib_current % 2 == 0:

            # Increment our total value by that amount
            total_fib += fib_current

    # Return our final value
    return total_fib



if __name__ == '__main__':

    max_number = 4e6

    res = run_fib(max_number)
    msg = f'The sum of even numbers in the Fibonacci sequence'
    msg += f'below a maximum sequence value of {int(max_number)} is {res}'

